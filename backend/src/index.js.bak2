const express = require('express')
const dns = require('dns')
// Prefer IPv4 to avoid ENETUNREACH on hosts without IPv6 (e.g., some PaaS egress)
try { dns.setDefaultResultOrder('ipv4first') } catch (_) {}
const cors = require('cors')
const helmet = require('helmet')
const morgan = require('morgan')
const rateLimit = require('express-rate-limit')
const path = require('path')
const dotenv = require('dotenv')
const { supabase } = require('./config/supabase')

// Configure dotenv (only in development)
if (process.env.NODE_ENV !== 'production') {
  const dotenvResult = dotenv.config()
  if (dotenvResult.error) {
    console.warn('⚠️ No .env file found. Using environment variables.')
  }
}

// Validate required environment variables
const requiredEnv = ['SUPABASE_URL', 'SUPABASE_ANON_KEY', 'DATABASE_URL']
const missingEnv = requiredEnv.filter((key) => !process.env[key])
if (missingEnv.length > 0) {
  console.error('❌ Missing required environment variables:', missingEnv.join(', '))
  requiredEnv.forEach((key) => {
    console.error(`${key}:`, process.env[key] ? '✅' : '❌')
  })
  process.exit(1)
}

// Initialize express app
const app = express()
const PORT = process.env.PORT || 5000

// Trust proxy for Render deployment
app.set('trust proxy', 1)

// Security middleware
app.use(helmet())

// CORS configuration
app.use(cors({
  origin: process.env.CORS_ORIGIN || true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  exposedHeaders: ['Content-Range', 'X-Content-Range'],
  credentials: true,
  maxAge: 600 // 10 minutes
}))

// Rate limiting
const limiter = rateLimit({
  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000, // 15 minutes
  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100 // limit each IP to 100 requests per windowMs
})
app.use('/api/', limiter)

// Body parsing middleware
app.use(express.json({ limit: '10mb' }))
app.use(express.urlencoded({ extended: true, limit: '10mb' }))

// Logging middleware
if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'))
}

// Static file serving
app.use('/uploads', express.static(path.join(__dirname, '../uploads')))
app.use(express.static(path.join(__dirname, '../../frontend/dist')))

// Health check endpoint with detailed diagnostics
app.get('/health', async (req, res) => {
  const health = {
    timestamp: new Date(),
    status: 'investigating',
    environment: process.env.NODE_ENV,
    uptime: process.uptime(),
    memoryUsage: process.memoryUsage(),
    supabase: {
      status: 'checking',
      url: process.env.SUPABASE_URL ? `${process.env.SUPABASE_URL.substring(0, 8)}...` : 'not_set',
      keyLength: process.env.SUPABASE_ANON_KEY?.length || 0,
      connection: 'checking'
    },
    render: {
      isRender: !!process.env.RENDER,
      region: process.env.RENDER_REGION || 'unknown'
    }
  }

  try {
    // Test Supabase connection
    const { data, error } = await supabase
      .from('products')
      .select('id')
      .limit(1)
    
    if (error) {
      health.supabase.status = 'error'
      health.supabase.error = {
        message: error.message,
        hint: error.hint,
        code: error.code
      }
      health.status = 'degraded'
    } else {
      health.supabase.status = 'connected'
      health.supabase.connection = 'successful'
      health.status = 'healthy'
    }
  } catch (error) {
    health.supabase.status = 'error'
    health.supabase.error = {
      message: error.message,
      type: error.name,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }
    health.status = 'critical'
  }

  // Send appropriate status code
  const statusCode = health.status === 'healthy' ? 200 : 
                    health.status === 'degraded' ? 200 :
                    503

  res.status(statusCode).json(health)
})

// Import routes
const authRoutes = require('./routes/auth')
const customerRoutes = require('./routes/customers-pg')
const userRoutes = require('./routes/users')
const productRoutes = require('./routes/products')
const orderRoutes = require('./routes/orders')
const productionRoutes = require('./routes/production')
const rawMaterialRoutes = require('./routes/raw-materials')
const invoiceRoutes = require('./routes/invoices')
const reportRoutes = require('./routes/reports')
const statsRoutes = require('./routes/stats')

// Import middleware
const { errorHandler } = require('./middlewares/errorHandler')
const { authMiddleware } = require('./middlewares/auth')

// API routes
app.get('/', (req, res) => {
  res.status(200).json({
    name: 'Saft ERP API',
    version: '1.0.0',
    description: 'Backend API for Saft ERP System',
    docs: '/api-docs',
    health: '/health',
    endpoints: {
      auth: '/api/auth',
      users: '/api/users',
      customers: '/api/customers-pg',
      products: '/api/products',
      orders: '/api/orders',
      production: '/api/production',
      rawMaterials: '/api/raw-materials',
      invoices: '/api/invoices',
      reports: '/api/reports',
      stats: '/api/stats'
    }
  })
})

app.use('/api/auth', authRoutes)
app.use('/api/users', authMiddleware, userRoutes)
app.use('/api/customers-pg', authMiddleware, customerRoutes)
app.use('/api/products', authMiddleware, productRoutes)
app.use('/api/orders', authMiddleware, orderRoutes)
app.use('/api/production', authMiddleware, productionRoutes)
app.use('/api/raw-materials', authMiddleware, rawMaterialRoutes)
app.use('/api/invoices', authMiddleware, invoiceRoutes)
app.use('/api/reports', authMiddleware, reportRoutes)
app.use('/api/stats', authMiddleware, statsRoutes)

// Handle frontend routes
app.get('*', (req, res) => {
  if (req.url.startsWith('/api')) {
    return res.status(404).json({ 
      error: 'Route not found',
      message: `Cannot ${req.method} ${req.originalUrl}`
    })
  }
  res.sendFile(path.join(__dirname, '../../frontend/dist/index.html'))
})

// Error handling middleware
app.use(errorHandler)

// Start server
if (process.env.NODE_ENV !== 'production' || !process.env.VERCEL) {
  const server = app.listen(PORT, '0.0.0.0', () => {
    console.log(`🚀 Saft ERP API server running on port ${PORT}`)
    console.log(`📊 Environment: ${process.env.NODE_ENV}`)
    console.log(`🔗 Health check: http://localhost:${PORT}/health`)
  })

  // Handle server errors
  server.on('error', (error) => {
    if (error.code === 'EADDRINUSE') {
      console.error(`❌ Port ${PORT} is already in use`)
      process.exit(1)
    }
    console.error('❌ Server error:', error)
    process.exit(1)
  })

  // Handle graceful shutdown
  process.on('SIGTERM', () => {
    console.log('🛑 SIGTERM received. Shutting down gracefully...')
    server.close(() => {
      console.log('✅ Server closed')
      process.exit(0)
    })
  })

  process.on('SIGINT', () => {
    console.log('🛑 SIGINT received. Shutting down gracefully...')
    server.close(() => {
      console.log('✅ Server closed')
      process.exit(0)
    })
  })
}

module.exports = app